snippet for
for ${1:x} in $2:
	$0
endsnippet

snippet if
if $1:
	$2
endsnippet

snippet f
def $1`!p
t[1] = t[1].replace(' ', '_')
`($2) -> $3:
	$0
endsnippet

snippet s.
self.
endsnippet

snippet ds
"""
$0

Args:
	$1
Returns:
	$2
"""
endsnippet

snippet init
def __init__(self, $1):
	$2
endsnippet

snippet class
class $1:
	def __init__(self${2:, }):
		$0
endsnippet

snippet try
try:
	$1
except Exception as error:
	$2
	continue
endsnippet

snippet print
print('$1')
endsnippet

snippet kwargs
kwargs.get('$1'${2:, ''})
endsnippet

snippet test
def test_$1`!p
t[1] = t[1].replace(' ', '_')
`(${2:self}) -> None:
	"""
	Given $3,
	When $4,
	Then $5
	"""
	$0
endsnippet

snippet gwt
"""
Given $1,
When $2,
Then $3
"""
endsnippet

snippet pry
breakpoint()
endsnippet

snippet ipry
from IPython import embed; embed()
endsnippet

snippet param
@pytest.mark.parametrize("test_input, expected", [("$1", $2), ("$3", $2)])
endsnippet

snippet main
if __name__ == "__main__":
	$0
endsnippet

snippet markdb
@pytest.mark.django_db
endsnippet

snippet shebang
#!/usr/bin/env python3
endsnippet

snippet patch
@mock.patch("$0", ${1:autospec=True})
endsnippet

snippet elog
import logging
logger = logging.getLogger("eigenapp.ejob")
endsnippet

snippet djq
from django.db import connection
from django.test.utils import CaptureQueriesContext
with CaptureQueriesContext(connection) as context:
	$0
endsnippet

snippet opn
Optional[$0] = None
endsnippet

snippet op
Optional[$0]
endsnippet

snippet rtn
-> None
endsnippet

snippet tc
class Test$1:
	"""Tests for the \`$0\` method."""
endsnippet

snippet repr
def __repr__(self) -> str:
	"""Return the string representation.
	
	Returns:
		the string representation
	"""
	return f"<class '{self.__class__.__name__}' $0>"

def __str__(self) -> str:
	"""Return the string representation."""
	return self.__repr__()
endsnippet

snippet ds
"""$1.

Args:
	$2
	
Returns:
	$3
"""
endsnippet

snippet as
assert $0
endsnippet
