snippet for
for ${1:x} in $2:
	$0
endsnippet

snippet if
if $1:
	$2
endsnippet

snippet f
def $1`!p
t[1] = t[1].replace(' ', '_')
`($2) -> $3:
	$0
endsnippet

snippet v
$1`!p t[1] = t[1].replace(' ', '_')` = $0
endsnippet

snippet af
async def $1`!p
t[1] = t[1].replace(' ', '_')
`($2) -> $3:
	$0
endsnippet

snippet aw
await $0
endsnippet

snippet s.
self.$0
endsnippet

snippet enum
enumerate(${1:${VISUAL}})
endsnippet

snippet ds
"""
$0

Args:
	$1
Returns:
	$2
"""
endsnippet

snippet init
def __init__(self, $1):
	$2
endsnippet

snippet class
class $1:
	def __init__(self${2:, }):
		$0
endsnippet

snippet try
try:
	$1
except Exception as error:
	$2
	pass
endsnippet

snippet print
print('$1')
endsnippet

snippet test
def test_$1`!p
t[1] = t[1].replace(' ', '_')
`(${2:self}) -> None:
	"""$3."""
	$0
endsnippet

snippet pry
breakpoint()
endsnippet

snippet ipry
from IPython import embed; embed()
endsnippet

snippet param
@pytest.mark.parametrize("test_input, expected", [("$1", $2), ("$3", $2)])
endsnippet

snippet main
if __name__ == "__main__":
	$0
endsnippet

snippet markdb
@pytest.mark.django_db
endsnippet

snippet shebang
#!/usr/bin/env python3
endsnippet

snippet patch
@mock.patch("$0", ${1:autospec=True})
endsnippet

snippet djq
from django.db import connection
from django.test.utils import CaptureQueriesContext
with CaptureQueriesContext(connection) as context:
	$0
endsnippet

snippet opn
Optional[${1:${VISUAL}}] = None
endsnippet

snippet op
Optional[${1:${VISUAL}}]
endsnippet

snippet rtn
-> None
endsnippet

snippet tc
class Test$1:
	"""Tests for the \`$2\` ${3:method}."""
endsnippet

snippet repr
def __repr__(self) -> str:
	"""Return the string representation.
	
	Returns:
		the string representation
	"""
	return f"<class '{self.__class__.__name__}' $0>"

def __str__(self) -> str:
	"""Return the string representation."""
	return self.__repr__()
endsnippet

snippet ds
"""$1.

Args:
	$2
	
Returns:
	$3
"""
endsnippet

snippet as
assert $0
endsnippet

snippet vcr
@vcr.use_cassette("$0")
endsnippet

snippet '([1-9])dp' "decimal places" ir
${VISUAL}:.`!p snip.rv = match.group(1)`f
endsnippet

snippet inp
import numpy as np
endsnippet

snippet npz "np.zeros(())"
np.zeros(($1))$0
endsnippet

snippet ipd
import pandas as pd
endsnippet

snippet df
pd.DataFrame
endsnippet

snippet ind
from numpy.typing import NDArray
endsnippet

snippet iplt
import matplotlib.pyplot as plt
endsnippet

snippet rng
rng = np.random.default_rng(${1:1234})
endsnippet

snippet pf
print(f"$1")
endsnippet

snippet itqdm
from tqdm import tqdm
endsnippet

snippet iatx
import arraytex as atx
endsnippet

snippet atx
atx.to_matrix(${1:A}, num_format="${2:.2f}", style="${3:b}")
endsnippet

snippet auto
#  %load_ext autoreload
#  %autoreload 2
#  from `!p snip.rv = snip.basename` import *
endsnippet

snippet sub "subplot"
fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(9, 4))
ax1.imshow($1)
ax1.set_title("Plot 1")
ax2.imshow($1)
ax2.set_title("Plot 2")
fig.show()
endsnippet

snippet 'npa([1-9]?)([1-9]?)' "numpy array" ir
${1:X} = np.array([$2`!p
if not match.group(1):
	snip.rv = "])"
else:
	snip >> 1
	r = "[" + ", ".join(["" for _ in range(int(match.group(2)))]) + "],"
	for _ in range(int(match.group(1))):
		snip += r
	snip << 1
	snip += "])"
	`$0
endsnippet
